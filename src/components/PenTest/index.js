import React, { Component } from 'react'
import Pen from './Pen'

class PenTest extends Component {

  constructor (props) {
    super(props)
    this.state = {
      isDrawing: false
    }
  }

  componentDidMount () {
    this.pen = new Pen(this.canvas)
    const strokes = JSON.parse(window.sessionStorage.getItem('strokes'))
    if (strokes) {
      this.pen.setStrokes(strokes)
    }
    this.canvas.addEventListener('pointerdown', this.downHandler)
    this.canvas.addEventListener('pointerup', this.upHandler)
    this.canvas.addEventListener('pointermove', this.moveHandler)
  }

  componentWillUnmount () {
    this.canvas.removeEventListener('pointerdown', this.downHandler)
    this.canvas.removeEventListener('pointerup', this.upHandler)
    this.canvas.removeEventListener('pointermove', this.moveHandler)
    this.setState({ isDrawing: false })
  }

  componentDidUpdate () {
    window.sessionStorage.setItem('strokes', JSON.stringify(this.pen.getStrokes()))
  }

  downHandler = (event) => {
    const x = event.offsetX
    const y = event.offsetY
    const p = event.pressure
    this.setState({
      isDrawing: true
    }, () => {
      this.pen.beginStroke(x, y, p)
    })
  }

  upHandler = (event) => {
    const x = event.offsetX
    const y = event.offsetY
    const p = event.pressure
    this.setState({
      isDrawing: false
    }, () => {
      this.pen.endStroke(x, y, p)
    })
  }

  moveHandler = (event) => {
    if (this.state.isDrawing) {
      const x = event.offsetX
      const y = event.offsetY
      const p = event.pressure
      this.pen.extendStroke(x, y, p)
    }
  }

  render () {
    return <canvas style={{backgroundColor: 'white'}}
      ref={canvas => { this.canvas = canvas }}
      height={1080 / 2}
      width={1922 / 2}
    />
  }
}

export default PenTest
